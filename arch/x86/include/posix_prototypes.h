#On libc rela.dyn
#+void *malloc(size_t size);
#-void free(void *ptr);
#+void *realloc(void *ptr, size_t size);
#+void *memalign(size_t alignment, size_t size);
#-void *calloc(size_t nmemb, size_t size);
#On libdl rela.dyn
#-void free(void *ptr)
#-void *calloc(size_t nmemb, size_t size);
#-char *strcpy(char *dest, const char *src);
#-char *strerror(int errnum);
#Special arguments
#+int pthread_create (pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine) (void *), void *arg);
#+int glob (const char *pattern, int flags, int (*errfunc) (const char *epath, int eerrno), glob_t *pglob);
#+void *tdelete (const void *key, void **rootp, int (*compar)(const void *, const void *));
#+void qsort_r (void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *, void *), void *arg);
#+void qsort (void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *));
#+void pthread_cleanup_push (void (*routine)(void *), void *arg);
#+void *lsearch (const void *key, void *base, size_t *nmemb, size_t size, int(*compar)(const void *, const void *));
#+void *lfind (const void *key, const void *base, size_t *nmemb, size_t size, int(*compar)(const void *, const void *));
#+void *bsearch (const void *key, const void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *));
#WHOT;;;
#-int clock_gettime(clockid_t clk_id, struct timespec *tp);
#-void *memset(void *s, int c, size_t n);
#-int mprotect(void *addr, size_t len, int prot);
#pid_t fork(void);
#int setjmp(jmp_buf env);
#void longjmp(jmp_buf env, int val);
#ssize_t read(int fd, void *buf, size_t count);
#ssize_t write(int fd, const void *buf, size_t count);
#int fstat(int fd, struct stat *buf);
#Used to be problematic
void *pvalloc(size_t size);
int posix_memalign(void **memptr, size_t alignment, size_t size);
void *memcpy(void *dest, const void *src, size_t n);
int chdir(const char *path);
int mkdir(const char *pathname, mode_t mode);
int nanosleep(const struct timespec *req, struct timespec *rem);
###
char *asctime(const struct tm *tm);
char *asctime_r(const struct tm *tm, char *buf);
char *catgets(nl_catd catalog, int set_number, int message_number, const char *message);
char *crypt(const char *key, const char *salt);
char *crypt_r(const char *key, const char *salt, struct crypt_data *data);
char *ctime(const time_t *timep);
char *ctime_r(const time_t *timep, char *buf);
char *cuserid(char *string);
char *dirname(char *path);
char *fgets(char *s, int size, FILE *stream);
char *fgets_unlocked(char *s, int n, FILE *stream);
char *get_current_dir_name(void);
char *getcwd(char *buf, size_t size);
char *getenv(const char *name);
char *getlogin(void);
char *gets(char *s);
char *getwd(char *buf);
char *inet_ntoa(struct in_addr in);
char *initstate(unsigned int seed, char *state, size_t n);
char *mkdtemp(char *template);
char *nl_langinfo(nl_item item);
char *ptsname(int fd);
char *secure_getenv(const char *name);
char *setlocale(int category, const char *locale);
char *setstate(char *state);
char *ttyname(int fd);
clock_t clock(void);
clock_t times(struct tms *buf);
const char *gai_strerror(int errcode);
const char *hstrerror(int err);
const char *inet_ntop(int af, const void *src, char *dst, socklen_t size); 
DIR *fdopendir(int fd);
DIR *opendir(const char *name);
div_t div(int numerator, int denominator);
double acos(double x);
double acosh(double x);
double asin(double x);
double asinh(double x);
double atan(double x);
double atanh(double x);
double atof(const char *nptr);
double cabs(double complex z);
double carg(double complex z);
double cbrt(double x);
double ceil(double x);
double cimag(double complex z);
double complex cacos(double complex z);
double complex cacosh(double complex z);
double complex casin(double complex z);
double complex casinh(double complex z);
double complex catan(double complex z);
double complex catanh(double complex z);
double complex ccos(double complex z);
double complex ccosh(double complex z);
double complex cexp(double complex z);
double complex clog(double complex z);
double complex conj(double complex z);
double complex cpow(double complex x, complex double z);
double complex cproj(double complex z);
double complex csin(double complex z);
double complex csinh(double complex z);
double complex csqrt(double complex z);
double complex ctan(double complex z);
double complex ctanh(double complex z);
double copysign(double x, double y);
double cos(double x);
double cosh(double x);
double creal(double complex z);
double difftime(time_t time1, time_t time0);
double drem(double x, double y);
double erfc(double x);
double erf(double x);
double exp(double x);
double fabs(double x);
double fdim(double x, double y);
double floor(double x);
double fma(double x, double y, double z);
double fmax(double x, double y);
double fmin(double x, double y);
double fmod(double x, double y);
double frexp(double x, int *exp);
double hypot(double x, double y);
double jn(int n, double x);
double ldexp(double x, int exp);
double lgamma(double x);
double log1p(double x);
double logb(double x);
double modf(double x, double *iptr);
double nan(const char *tagp);
double nearbyint(double x);
double nextafter(double x, double y);
double nexttoward(double x, long double y);
double pow(double x, double y);
double remainder(double x, double y);
double remquo(double x, double y, int *quo);
double rint(double x);
double round(double x);
double scalbln(double x, long int exp);
double scalbn(double x, int exp);
double sin(double x);
double sinh(double x);
double sqrt(double x);
double tan(double x);
double tanh(double x);
double tgamma(double x);
double trunc(double x);
double yn(int n, double x);
ENTRY *hsearch(ENTRY item, ACTION action);
FILE *fdopen(int fd, const char *mode);
FILE *fmemopen(void *buf, size_t size, const char *mode);
FILE *fopen(const char *path, const char *mode);
FILE *freopen(const char *path, const char *mode, FILE *stream);
FILE *open_memstream(char **ptr, size_t *sizeloc);
FILE *open_wmemstream(wchar_t **ptr, size_t *sizeloc);
FILE *popen(const char *command, const char *type);
FILE *tmpfile(void);
float acosf(float x);
float acoshf(float x);
float asinf(float x);
float asinhf(float x);
float atan2f(float y, float x);
float atanf(float x);
float atanhf(float x);
float cabsf(float complex z);
float cargf(float complex z);
float cbrtf(float x);
float ceilf(float x);
float cimagf(float complex z);
float complex cacosf(float complex z);
float complex cacoshf(float complex z);
float complex casinf(float complex z);
float complex casinhf(float complex z);
float complex catanf(float complex z);
float complex catanhf(float complex z);
float complex ccosf(float complex z);
float complex ccoshf(float complex z);
float complex cexpf(float complex z);
float complex clogf(float complex z);
float complex conjf(float complex z);
float complex cpowf(float complex x, complex float z);
float complex cprojf(float complex z);
float complex csinf(float complex z);
float complex csinhf(float complex z);
float complex csqrtf(float complex z);
float complex ctanf(float complex z);
float complex ctanhf(float complex z);
float copysignf(float x, float y);
float cosf(float x);
float coshf(float x);
float crealf(float complex z);
float dremf(float x, float y);
float erfcf(float x);
float erff(float x);
float exp2f(float x);
float expf(float x);
float expm1f(float x);
float fabsf(float x);
float fdimf(float x, float y);
float floorf(float x);
float fmaf(float x, float y, float z);
float fmaxf(float x, float y);
float fminf(float x, float y);
float fmodf(float x, float y);
float frexpf(float x, int *exp);
float hypotf(float x, float y);
float j0f(float x);
float j1f(float x);
float jnf(int n, float x);
float ldexpf(float x, int exp);
float lgammaf(float x);
float lgammaf_r(float x, int *signp);
float log10f(float x);
float log1pf(float x);
float log2f(float x);
float logbf(float x);
float logf(float x);
float modff(float x, float *iptr);
float nanf(const char *tagp);
float nearbyintf(float x);
float nextafterf(float x, float y);
float nexttowardf(float x, long double y);
float powf(float x, float y);
float remainderf(float x, float y);
float remquof(float x, float y, int *quo);
float rintf(float x);
float roundf(float x);
float scalblnf(float x, long int exp);
float scalbnf(float x, int exp);
float sinf(float x);
float sinhf(float x);
float sqrtf(float x);
float tanf(float x);
float tanhf(float x);
float tgammaf(float x);
float truncf(float x);
gid_t getegid(void);
gid_t getgid(void);
imaxdiv_t imaxdiv(intmax_t numerator, intmax_t denominator);
in_addr_t inet_addr(const char *cp);
in_addr_t inet_lnaof(struct in_addr in);
in_addr_t inet_netof(struct in_addr in);
in_addr_t inet_network(const char *cp);
int abs(int j);
int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
int access(const char *pathname, int mode);
int aio_cancel(int fd, struct aiocb *aiocbp);
int aio_error(const struct aiocb *aiocbp);
int aio_fsync(int op, struct aiocb *aiocbp);
int aio_read(struct aiocb *aiocbp);
int aio_suspend(const struct aiocb * const aiocb_list[], int nitems, const struct timespec *timeout);
int aio_write(struct aiocb *aiocbp);
int atoi(const char *nptr);
int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
int catclose(nl_catd catalog);
int cfsetispeed(struct termios *termios_p, speed_t speed);
int cfsetospeed(struct termios *termios_p, speed_t speed);
int cfsetspeed(struct termios *termios_p, speed_t speed);
int chmod(const char *path, mode_t mode);
int chown(const char *path, uid_t owner, gid_t group);
int clock_getcpuclockid(pid_t pid, clockid_t *clock_id);
int clock_getres(clockid_t clk_id, struct timespec *res);
int clock_nanosleep(clockid_t clock_id, int flags, const struct timespec *request, struct timespec *remain);
int clock_settime(clockid_t clk_id, const struct timespec *tp);
int closedir(DIR *dirp);
int close(int fd);
int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);
int creat(const char *pathname, mode_t mode);
int dirfd(DIR *dirp);
#int dlclose(void *handle);
int dup(int oldfd);
int execv(const char *path, char *const argv[]);
int execve(const char *filename, char *const argv[], char *const envp[]);
int execvp(const char *file, char *const argv[]);
int execvpe(const char *file, char *const argv[], char *const envp[]);
int faccessat(int dirfd, const char *pathname, int mode, int flags);
int fchdir(int fd);
int fchmodat(int dirfd, const char *pathname, mode_t mode, int flags);
int fchmod(int fd, mode_t mode);
int fchownat(int dirfd, const char *pathname, uid_t owner, gid_t group, int flags);
int fchown(int fd, uid_t owner, gid_t group);
int fclose(FILE *fp);
int fdatasync(int fd);
int feclearexcept(int excepts);
int fegetenv(fenv_t *envp);
int fegetexceptflag(fexcept_t *flagp, int excepts);
int fegetround(void);
int feholdexcept(fenv_t *envp);
int feof(FILE *stream);
int feof_unlocked(FILE *stream);
int feraiseexcept(int excepts);
int ferror(FILE *stream);
int ferror_unlocked(FILE *stream);
int fesetenv(const fenv_t *envp);
int fesetexceptflag(const fexcept_t *flagp, int excepts);
int fesetround(int rounding_mode);
int fetestexcept(int excepts);
int feupdateenv(const fenv_t *envp);
int fexecve(int fd, char *const argv[], char *const envp[]);
int fflush(FILE *stream);
int fflush_unlocked(FILE *stream);
int ffs(int i);
int ffsll(long long int i);
int ffsl(long int i);
int fgetc(FILE *stream);
int fgetc_unlocked(FILE *stream);
int fgetpos(FILE *stream, fpos_t *pos);
int fileno(FILE *stream);
int fileno_unlocked(FILE *stream);
int fmtmsg(long classification, const char *label, int severity, const char *text, const char *action, const char *tag);
int fputc(int c, FILE *stream);
int fputc_unlocked(int c, FILE *stream);
int fputs(const char *s, FILE *stream);
int fputs_unlocked(const char *s, FILE *stream);
int fputws(const wchar_t *ws, FILE *stream);
int fputws_unlocked(const wchar_t *ws, FILE *stream);
int fseek(FILE *stream, long offset, int whence);
int fseeko(FILE *stream, off_t offset, int whence);
int fstatat(int dirfd, const char *pathname, struct stat *buf, int flags);
int fstatvfs(int fd, struct statvfs *buf);
int fsync(int fd);
int ftruncate(int fd, off_t length);
int ftrylockfile(FILE *filehandle);
int futimens(int fd, const struct timespec times[2]);
int fwide(FILE *stream, int mode);
int getaddrinfo(const char *node, const char *service, const struct addrinfo *hints, struct addrinfo **res);
int getc(FILE *stream);
int getchar_unlocked(void);
int getchar(void);
int getc_unlocked(FILE *stream);
int getdate_r(const char *string, struct tm *res);
int getgrgid_r(gid_t gid, struct group *grp, char *buf, size_t buflen, struct group **result);
int getgrnam_r(const char *name, struct group *grp, char *buf, size_t buflen, struct group **result);
int getgroups(int size, gid_t list[]);
int gethostbyaddr_r(const void *addr, socklen_t len, int type, struct hostent *ret, char *buf, size_t buflen, struct hostent **result, int *h_errnop);
int gethostbyname2_r(const char *name, int af, struct hostent *ret, char *buf, size_t buflen, struct hostent **result, int *h_errnop);
int gethostbyname_r(const char *name, struct hostent *ret, char *buf, size_t buflen, struct hostent **result, int *h_errnop);
int gethostent_r(struct hostent *ret, char *buf, size_t buflen, struct hostent **result, int *h_errnop);
int gethostname(char *name, size_t len);
int getitimer(int which, struct itimerval *curr_value);
int getlogin_r(char *buf, size_t bufsize);
int getnameinfo(const struct sockaddr *sa, socklen_t salen, char *host, size_t hostlen, char *serv, size_t servlen, int flags);
int getopt(int argc, char * const argv[], const char *optstring);
int getopt_long(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex);
int getopt_long_only(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex);
int getpeername(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
int getpwnam_r(const char *name, struct passwd *pwd, char *buf, size_t buflen, struct passwd **result);
int getpwuid_r(uid_t uid, struct passwd *pwd, char *buf, size_t buflen, struct passwd **result);
int getrusage(int who, struct rusage *usage);
int getsockname(int sockfd, struct sockaddr *addr, socklen_t *addrlen);
int getsockopt(int sockfd, int level, int optname, void *optval, socklen_t *optlen);
int getsubopt(char **optionp, char * const *tokens, char **valuep);
int gettimeofday(struct timeval *tv, struct timezone *tz);
int grantpt(int fd);
int hcreate_r(size_t nel, struct hsearch_data *htab);
int hcreate(size_t nel);
int hsearch_r(ENTRY item, ACTION action, ENTRY **retval, struct hsearch_data *htab);
int ilogb(double x);
int ilogbf(float x);
int ilogbl(long double x);
int inet_aton(const char *cp, struct in_addr *inp);
int inet_pton(int af, const char *src, void *dst);
int killpg(int pgrp, int sig);
int kill(pid_t pid, int sig);
int klogctl(int type, char *bufp, int len);
int lchown(const char *path, uid_t owner, gid_t group);
int linkat(int olddirfd, const char *oldpath, int newdirfd, const char *newpath, int flags);
int link(const char *oldpath, const char *newpath);
int lio_listio(int mode, struct aiocb *const aiocb_list[], int nitems, struct sigevent *sevp);
int listen(int sockfd, int backlog);
int lockf(int fd, int cmd, off_t len);
int lstat(const char *path, struct stat *buf);
intmax_t imaxabs(intmax_t j);
int memcmp(const void *s1, const void *s2, size_t n);
int mkdirat(int dirfd, const char *pathname, mode_t mode);
int mkfifoat(int dirfd, const char *pathname, mode_t mode);
int mkfifo(const char *pathname, mode_t mode);
int mknodat(int dirfd, const char *pathname, mode_t mode, dev_t dev);
int mknod(const char *pathname, mode_t mode, dev_t dev);
int mkostemp(char *template, int flags);
int mkostemps(char *template, int suffixlen, int flags);
int mlockall(int flags);
int mlock(const void *addr, size_t len);
int mq_close(mqd_t mqdes);
int mq_getattr(mqd_t mqdes, struct mq_attr *attr);
int mq_notify(mqd_t mqdes, const struct sigevent *sevp);
int mq_send(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned msg_prio);
int mq_timedsend(mqd_t mqdes, const char *msg_ptr, size_t msg_len, unsigned msg_prio,  const struct timespec *abs_timeout);
int mq_unlink(const char *name);
int msgctl(int msqid, int cmd, struct msqid_ds *buf);
int msgget(key_t key, int msgflg);
int msgsnd(int msqid, const void *msgp, size_t msgsz, int msgflg);
int msync(void *addr, size_t length, int flags);
int munlockall(void);
int munlock(const void *addr, size_t len);
int munmap(void *addr, size_t length);
int nice(int inc);
int pause(void);
int pclose(FILE *stream);
int pipe(int pipefd[2]);
int poll(struct pollfd *fds, nfds_t nfds, int timeout);
int posix_fadvise(int fd, off_t offset, off_t len, int advice);
int posix_fallocate(int fd, off_t offset, off_t len);
int posix_openpt(int flags);
int pthread_attr_destroy(pthread_attr_t *attr);
int pthread_attr_getdetachstate(pthread_attr_t *attr, int *detachstate);
int pthread_attr_getguardsize(pthread_attr_t *attr, size_t *guardsize);
int pthread_attr_getinheritsched(pthread_attr_t *attr, int inheritsched);
int pthread_attr_getschedparam(pthread_attr_t *attr, struct sched_param *param);
int pthread_attr_getschedpolicy(pthread_attr_t *attr, int *policy);
int pthread_attr_getscope(pthread_attr_t *attr, int *scope);
int pthread_attr_getstack(pthread_attr_t *attr, void **stackaddr, size_t *stacksize);
int pthread_attr_getstacksize(pthread_attr_t *attr, size_t *stacksize);
int pthread_attr_init(pthread_attr_t *attr);
int pthread_attr_setdetachstate(pthread_attr_t *attr, int detachstate);
int pthread_attr_setguardsize(pthread_attr_t *attr, size_t guardsize);
int pthread_attr_setinheritsched(pthread_attr_t *attr, int *inheritsched);
int pthread_attr_setschedparam(pthread_attr_t *attr, const struct sched_param *param);
int pthread_attr_setschedpolicy(pthread_attr_t *attr, int policy);
int pthread_attr_setscope(pthread_attr_t *attr, int scope);
int pthread_attr_setstack(pthread_attr_t *attr, void *stackaddr, size_t stacksize);
int pthread_attr_setstacksize(pthread_attr_t *attr, size_t stacksize);
int pthread_cancel(pthread_t thread);
int pthread_detach(pthread_t thread);
int pthread_equal(pthread_t t1, pthread_t t2);
int pthread_getconcurrency(void);
int pthread_getcpuclockid(pthread_t thread, clockid_t *clock_id);
int pthread_getschedparam(pthread_t thread, int *policy,  const struct sched_param *param);
int pthread_join(pthread_t thread, void **retval);
int pthread_kill(pthread_t thread, int sig);
int pthread_setcancelstate(int state, int *oldstate);
int pthread_setcanceltype(int type, int *oldtype);
int pthread_setconcurrency(int new_level);
int pthread_setschedparam(pthread_t thread, int policy, struct sched_param *param);
int pthread_setschedprio(pthread_t thread, int prio);
int pthread_sigmask(int how, const sigset_t *set, sigset_t *oldset);
int ptsname_r(int fd, char *buf, size_t buflen);
int putchar(int c);
int putchar_unlocked(int c);
int putc(int c, FILE *stream);
int putc_unlocked(int c, FILE *stream);
int putenv(char *string);
int puts(const char *s);
int raise(int sig);
int rand_r(unsigned int *seedp);
int rand(void);
int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);
int remove(const char *pathname);
int renameat(int olddirfd, const char *oldpath, int newdirfd, const char *newpath);
int rename(const char *oldpath, const char *newpath);
int rmdir(const char *pathname);
int sched_getparam(pid_t pid, struct sched_param *param);
int sched_get_priority_max(int policy);
int sched_get_priority_min(int policy);
int sched_getscheduler(pid_t pid);
int sched_rr_get_interval(pid_t pid, struct timespec * tp);
int sched_setparam(pid_t pid, const struct sched_param *param);
int sched_setscheduler(pid_t pid, int policy, const struct sched_param *param);
int sched_yield(void);
int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout);
int sem_close(sem_t *sem);
int sem_destroy(sem_t *sem);
int semget(key_t key, int nsems, int semflg);
int sem_getvalue(sem_t *sem, int *sval);
int sem_init(sem_t *sem, int pshared, unsigned int value);
int semop(int semid, struct sembuf *sops, unsigned nsops);
int sem_post(sem_t *sem);
int semtimedop(int semid, struct sembuf *sops, unsigned nsops, struct timespec *timeout);
int sem_timedwait(sem_t *sem, const struct timespec *abs_timeout);
int sem_trywait(sem_t *sem);
int sem_unlink(const char *name);
int sem_wait(sem_t *sem);
int setegid(gid_t egid);
int setenv(const char *name, const char *value, int overwrite);
int seteuid(uid_t euid);
int setgid(gid_t gid);
int setitimer(int which, const struct itimerval *new_value, struct itimerval *old_value);
int setlogmask(int mask);
int setpgid(pid_t pid, pid_t pgid);
int setpgrp(void);
int setregid(gid_t rgid, gid_t egid);
int setreuid(uid_t ruid, uid_t euid);
int setsockopt(int sockfd, int level, int optname, const void *optval, socklen_t optlen);
int setuid(uid_t uid);
int setvbuf(FILE *stream, char *buf, int mode, size_t size);
int shmctl(int shmid, int cmd, struct shmid_ds *buf);
int shmdt(const void *shmaddr);
int shmget(key_t key, size_t size, int shmflg);
int shm_open(const char *name, int oflag, mode_t mode);
int shm_unlink(const char *name);
int shutdown(int sockfd, int how);
int sigaction(int signum, const struct sigaction *act,  struct sigaction *oldact);
int sigaddset(sigset_t *set, int signum);
int sigaltstack(const stack_t *ss, stack_t *oss);
int sigdelset(sigset_t *set, int signum);
int sigemptyset(sigset_t *set);
int sigfillset(sigset_t *set);
int sighold(int sig);
int sigignore(int sig);
int siginterrupt(int sig, int flag);
int sigismember(const sigset_t *set, int signum);
int sigpause(int sigmask);
int sigpending(sigset_t *set);
int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);
int sigqueue(pid_t pid, int sig, const union sigval value);
int sigrelse(int sig);
int sigsuspend(const sigset_t *mask);
int sigtimedwait(const sigset_t *set, siginfo_t *info, const struct timespec *timeout);
int sigwait(const sigset_t *set, int *sig);
int sigwaitinfo(const sigset_t *set, siginfo_t *info);
int sockatmark(int sockfd);
int socket(int domain, int type, int protocol);
int socketpair(int domain, int type, int protocol, int sv[2]);
int stat(const char *path, struct stat *buf);
int statvfs(const char *path, struct statvfs *buf);
int symlinkat(const char *oldpath, int newdirfd, const char *newpath);
int symlink(const char *oldpath, const char *newpath);
int syslog(int type, char *bufp, int len);
int system(const char *command);
int tcdrain(int fd);
int tcflow(int fd, int action);
int tcflush(int fd, int queue_selector);
int tcgetattr(int fd, struct termios *termios_p);
int tcsendbreak(int fd, int duration);
int tcsetattr(int fd, int optional_actions,  const struct termios *termios_p);
int tcsetpgrp(int fd, pid_t pgrp);
int timer_create(clockid_t clockid, struct sigevent *sevp, timer_t *timerid);
int timer_delete(timer_t timerid);
int timer_getoverrun(timer_t timerid);
int timer_gettime(timer_t timerid, struct itimerspec *curr_value);
int timer_settime(timer_t timerid, int flags, const struct itimerspec *new_value, struct itimerspec * old_value);
int truncate(const char *path, off_t length);
int ttyname_r(int fd, char *buf, size_t buflen);
int uname(struct utsname *buf);
int ungetc(int c, FILE *stream);
int unlinkat(int dirfd, const char *pathname, int flags);
int unlink(const char *pathname);
int unlockpt(int fd);
int unsetenv(const char *name);
int utime(const char *filename, const struct utimbuf *times);
int utimensat(int dirfd, const char *pathname, const struct timespec times[2], int flags);
int utimes(const char *filename, const struct timeval times[2]);
int vdprintf(int fd, const char *format, va_list ap);
int vfprintf(FILE *stream, const char *format, va_list ap);
int vfscanf(FILE *stream, const char *format, va_list ap);
int vfwprintf(FILE *stream, const wchar_t *format, va_list args);
int vprintf(const char *format, va_list ap);
int vscanf(const char *format, va_list ap);
int vwprintf(const wchar_t *format, va_list args);
int waitid(idtype_t idtype, id_t id, siginfo_t *infop, int options);
ldiv_t ldiv(long numerator, long denominator);
lldiv_t lldiv(long long numerator, long long denominator);
long atol(const char *nptr);
long double acoshl(long double x);
long double acosl(long double x);
long double asinhl(long double x);
long double asinl(long double x);
long double atan2l(long double y, long double x);
long double atanhl(long double x);
long double atanl( long double x);
long double cabsl(long double complex z);
long double cargl(long double complex z);
long double cbrtl(long double x);
long double ceill(long double x);
long double cimagl(long double complex z);
long double complex cacoshl(long double complex z);
long double complex cacosl(long double complex z);
long double complex casinhl(long double complex z);
long double complex casinl(long double complex z);
long double complex catanhl(long double complex z);
long double complex catanl(long double complex z);
long double complex ccoshl(long double complex z);
long double complex ccosl(long double complex z);
long double complex cexpl(long double complex z);
long double complex clogl(long double complex z);
long double complex conjl(long double complex z);
long double complex cpowl(long double complex x, complex long double z);
long double complex cprojl(long double complex z);
long double complex csinhl(long double complex z);
long double complex csinl(long double complex z);
long double complex csqrtl(long double complex z);
long double complex ctanhl(long double complex z);
long double complex ctanl(long double complex z);
long double copysignl(long double x, long double y);
long double coshl(long double x);
long double cosl(long double x);
long double creall(long double complex z);
long double dreml(long double x, long double y);
long double erfcl(long double x);
long double erfl(long double x);
long double exp2l(long double x);
long double expl(long double x);
long double expm1l(long double x);
long double fabsl(long double x);
long double fdiml(long double x, long double y);
long double floorl(long double x);
long double fmal(long double x, long double y, long double z);
long double fmaxl(long double x, long double y);
long double fminl(long double x, long double y);
long double fmodl(long double x, long double y);
long double frexpl(long double x, int *exp);
long double hypotl(long double x, long double y);
long double j0l(long double x);
long double j1l(long double x);
long double jnl(int n, long double x);
long double ldexpl(long double x, int exp);
long double lgammal(long double x);
long double log10l(long double x);
long double log1pl(long double x);
long double log2l(long double x);
long double logbl(long double x);
long double logl(long double x);
long double modfl(long double x, long double *iptr);
long double nanl(const char *tagp);
long double nearbyintl(long double x);
long double nextafterl(long double x, long double y);
long double nexttowardl(long double x, long double y);
long double powl(long double x, long double y);
long double remainderl(long double x, long double y);
long double remquol(long double x, long double y, int *quo);
long double rintl(long double x);
long double roundl(long double x);
long double scalblnl(long double x, long int exp);
long double scalbnl(long double x, int exp);
long double sinhl(long double x);
long double sinl(long double x);
long double sqrtl(long double x);
long double tanhl(long double x);
long double tanl(long double x);
long double tgammal(long double x);
long double truncl(long double x);
long fpathconf(int fd, int name);
long ftell(FILE *stream);
long gethostid(void);
long int labs(long int j);
long int lrint(double x);
long int lrintf(float x);
long int lrintl(long double x);
long int lround(double x);
long int lroundf(float x);
long int lroundl(long double x);
long int random(void);
long long atoll(const char *nptr);
long long atoq(const char *nptr);
long long int llabs(long long int j);
long long int llrint(double x);
long long int llrintf(float x);
long long int llrintl(long double x);
long long int llround(double x);
long long int llroundf(float x);
long long int llroundl(long double x);
long sysconf(int name);
long telldir(DIR *dirp);
long ulimit(int cmd, long newlimit);
mode_t umask(mode_t mask);
nl_catd catopen(const char *name, int flag);
off_t ftello(FILE *stream);
off_t lseek(int fd, off_t offset, int whence);
pid_t getpgid(pid_t pid);
pid_t getpgrp(void);
pid_t getpid(void);
pid_t getppid(void);
pid_t getsid(pid_t pid);
pid_t setsid(void);
pid_t tcgetpgrp(int fd);
pid_t tcgetsid(int fd);
pid_t wait(int *status);
pid_t waitpid(pid_t pid, int *status, int options);
sighandler_t sigset(int sig, sighandler_t disp);
size_t confstr(int name, char *buf, size_t len);
size_t fread_unlocked(void *ptr, size_t size, size_t n, FILE *stream);
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);
size_t fwrite_unlocked(const void *ptr, size_t size, size_t n, FILE *stream);
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);
speed_t cfgetispeed(const struct termios *termios_p);
speed_t cfgetospeed(const struct termios *termios_p);
ssize_t aio_return(struct aiocb *aiocbp);
ssize_t getdelim(char **lineptr, size_t *n, int delim, FILE *stream);
ssize_t getline(char **lineptr, size_t *n, FILE *stream);
ssize_t mq_receive(mqd_t mqdes, char *msg_ptr,  size_t msg_len, unsigned *msg_prio);
ssize_t mq_timedreceive(mqd_t mqdes, char *msg_ptr, size_t msg_len, unsigned *msg_prio, const struct timespec *abs_timeout);
ssize_t msgrcv(int msqid, void *msgp, size_t msgsz, long msgtyp, int msgflg);
ssize_t pread(int fd, void *buf, size_t count, off_t offset);
ssize_t pwrite(int fd, const void *buf, size_t count, off_t offset);
ssize_t readlink(const char *path, char *buf, size_t bufsiz);
ssize_t readv(int fd, const struct iovec *iov, int iovcnt);
ssize_t recvfrom(int sockfd, void *buf, size_t len, int flags, struct sockaddr *src_addr, socklen_t *addrlen);
ssize_t recv(int sockfd, void *buf, size_t len, int flags);
ssize_t recvmsg(int sockfd, struct msghdr *msg, int flags);
ssize_t send(int sockfd, const void *buf, size_t len, int flags);
ssize_t sendmsg(int sockfd, const struct msghdr *msg, int flags);
ssize_t sendto(int sockfd, const void *buf, size_t len, int flags, const struct sockaddr *dest_addr, socklen_t addrlen);
ssize_t writev(int fd, const struct iovec *iov, int iovcnt);
struct dirent *readdir(DIR *dirp);
struct group *getgrent(void);
struct group *getgrgid(gid_t gid);
struct group *getgrnam(const char *name);
struct hostent *gethostbyaddr(const void *addr, socklen_t len, int type);
struct hostent *gethostbyname(const char *name);
struct hostent *gethostent(void);
struct lconv *localeconv(void);
struct netent *getnetbyaddr(uint32_t net, int type);
struct netent *getnetbyname(const char *name);
struct netent *getnetent(void);
struct passwd *getpwent(void);
struct passwd *getpwnam(const char *name);
struct passwd *getpwuid(uid_t uid);
struct protoent *getprotobyname(const char *name);
struct protoent *getprotobynumber(int proto);
struct protoent *getprotoent(void);
struct servent *getservbyname(const char *name, const char *proto);
struct servent *getservbyport(int port, const char *proto);
struct servent *getservent(void);
struct tm *getdate(const char *string);
struct tm *gmtime(const time_t *timep);
struct tm *gmtime_r(const time_t *timep, struct tm *result);
struct tm *localtime(const time_t *timep);
struct tm *localtime_r(const time_t *timep, struct tm *result);
struct utmp *getutent(void);
struct utmp *getutid(struct utmp *ut);
struct utmp *getutline(struct utmp *ut);
struct utmp *pututline(struct utmp *ut);
time_t time(time_t *t);
uid_t geteuid(void);
uid_t getuid(void);
uint16_t htons(uint16_t hostshort);
uint16_t ntohs(uint16_t netshort);
uint32_t htonl(uint32_t hostlong);
uint32_t ntohl(uint32_t netlong);
unsigned int alarm(unsigned int seconds);
unsigned int sleep(unsigned int seconds);
void abort(void);
void *aligned_alloc(size_t alignment, size_t size);
void cfmakeraw(struct termios *termios_p);
void clearerr(FILE *stream);
void clearerr_unlocked(FILE *stream);
void closelog(void);
#void *dlopen(const char *filename, int flag);
void encrypt(char block[64], int edflag);
void encrypt_r(char *block, int edflag, struct crypt_data *data);
void endgrent(void);
void endhostent(void);
void endnetent(void);
void endprotoent(void);
void endpwent(void);
void endservent(void);
void endutent(void);
void flockfile(FILE *filehandle);
void freeaddrinfo(struct addrinfo *res);
void funlockfile(FILE *filehandle);
void hdestroy_r(struct hsearch_data *htab);
void hdestroy(void);
void herror(const char *s);
void insque(void *elem, void *prev);
void *memccpy(void *dest, const void *src, int c, size_t n);
void *memchr(const void *s, int c, size_t n);
void *memmove(void *dest, const void *src, size_t n);
void *memrchr(const void *s, int c, size_t n);
void *mmap(void *addr, size_t length, int prot, int flags, int fd, off_t offset);
void openlog(const char *ident, int option, int facility);
void perror(const char *s);
void psiginfo(const siginfo_t *pinfo, const char *s);
void psignal(int sig, const char *s);
void pthread_cleanup_pop(int execute);
void pthread_exit(void *retval);
void pthread_testcancel(void);
void remque(void *elem);
void rewinddir(DIR *dirp);
void rewind(FILE *stream);
void seekdir(DIR *dirp, long offset);
void setbuffer(FILE *stream, char *buf, size_t size);
void setbuf(FILE *stream, char *buf);
void setgrent(void);
void sethostent(int stayopen);
void setkey(const char *key);
void setnetent(int stayopen);
void setprotoent(int stayopen);
void setpwent(void);
void setservent(int stayopen);
void *shmat(int shmid, const void *shmaddr, int shmflg);
void siglongjmp(sigjmp_buf env, int val);
void srandom(unsigned int seed);
void srand(unsigned int seed);
void swab(const void *from, void *to, ssize_t n);
void sync(void);
wchar_t *fgetws_unlocked(wchar_t *ws, int n, FILE *stream);
wchar_t *fgetws(wchar_t *ws, int n, FILE *stream);
wchar_t *wmemcpy(wchar_t *dest, const wchar_t *src, size_t n);
wchar_t *wmemmove(wchar_t *dest, const wchar_t *src, size_t n);
wchar_t *wmemset(wchar_t *wcs, wchar_t wc, size_t n);
wint_t fgetwc(FILE *stream);
wint_t fgetwc_unlocked(FILE *stream);
wint_t fputwc_unlocked(wchar_t wc, FILE *stream);
wint_t fputwc(wchar_t wc, FILE *stream);
wint_t getwc(FILE *stream);
wint_t getwchar_unlocked(void);
wint_t getwchar(void);
wint_t getwc_unlocked(FILE *stream);
wint_t putwchar_unlocked(wchar_t wc);
wint_t putwchar(wchar_t wc);
wint_t putwc_unlocked(wchar_t wc, FILE *stream);
wint_t putwc(wchar_t wc, FILE *stream);
wint_t ungetwc(wint_t wc, FILE *stream);
